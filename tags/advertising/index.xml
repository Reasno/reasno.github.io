<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advertising on Garbage Collected</title>
    <link>https://guxi.me/tags/advertising/</link>
    <description>Recent content in Advertising on Garbage Collected</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Aug 2019 12:55:17 +0800</lastBuildDate>
    
	<atom:link href="https://guxi.me/tags/advertising/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compress Url Parameters Without a Storage</title>
      <link>https://guxi.me/posts/compress-url-parameters-without-a-storage/</link>
      <pubDate>Tue, 13 Aug 2019 12:55:17 +0800</pubDate>
      
      <guid>https://guxi.me/posts/compress-url-parameters-without-a-storage/</guid>
      <description>In advertising and other online marketing fields, a common practice is to distribute URLs to the clients so that they can report user action through a simple GET request.
They usually end up like this:
https://example.com/callback?user=tom&amp;amp;uid=145123555&amp;amp;timestamp=123456678&amp;amp;aid=123123123&amp;amp;pid=1251241241234&amp;amp;action_type=click&amp;amp;imei=125123123123123&amp;amp;andriod_id=12523652352&amp;amp;sign=1235124124.... Those parameters are fake. But you got the idea. Longer URLs mean higher bandwidth consumption. Moreover, if your URL is too long, you will risk triggering Error 413: request entity too large. I know nginx throws it.</description>
    </item>
    
    <item>
      <title>Ad Server Rewrite: Goals and Non Goals</title>
      <link>https://guxi.me/posts/ad-server-rewrite-goals-and-non-goals/</link>
      <pubDate>Fri, 26 Jul 2019 10:08:36 +0800</pubDate>
      
      <guid>https://guxi.me/posts/ad-server-rewrite-goals-and-non-goals/</guid>
      <description>We have carried out the first or maybe last round of rewrite of the Juhui DSP/SSP/ADX with Typescript. A few goals and non-goals have been set for this labor-intensive process.
Goals  Strong typed. Strong API contracts. Holistic Observability with logging, tracing, and metrics. Layered Architecture and dedicated component. Testcases can be run by anyone. Stateless over stateful. Improved readability. Proper code deprecation process.  Non-Goals  Use fancy technology.</description>
    </item>
    
    <item>
      <title>Realtime Query Oriented Data Structure for DMP</title>
      <link>https://guxi.me/posts/realtime-query-oriented-data-structure-for-dmp/</link>
      <pubDate>Sat, 13 Jul 2019 11:21:14 +0800</pubDate>
      
      <guid>https://guxi.me/posts/realtime-query-oriented-data-structure-for-dmp/</guid>
      <description>DMP stands for Data Management Platform, and per Wikipedia, it is a technology platform used for collecting and managing data, mainly for digital marketing purposes. To put it simply, DMP is a collection of data about user attributes.
As you might expect a DMP may contain more than millions of data. The DMP I worked on contained nearly a billion. Open source toolings such as Elasticsearch provided a good average baseline for data analytics, and reasonable response time for general-purpose querying.</description>
    </item>
    
  </channel>
</rss>