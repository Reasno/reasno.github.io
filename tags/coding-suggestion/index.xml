<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Suggestion on Garbage Collected</title>
    <link>https://guxi.me/tags/coding-suggestion/</link>
    <description>Recent content in Coding Suggestion on Garbage Collected</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Nov 2019 21:21:14 +0800</lastBuildDate>
    
	<atom:link href="https://guxi.me/tags/coding-suggestion/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hyperf Clean Annotations</title>
      <link>https://guxi.me/posts/hyperf-clean-annotations/</link>
      <pubDate>Sat, 02 Nov 2019 21:21:14 +0800</pubDate>
      
      <guid>https://guxi.me/posts/hyperf-clean-annotations/</guid>
      <description>注解属于元编程的一种。元编程从字面意思上说就是编写程序的程序。注解在给我们带来便捷的同时，如果使用不当，也有可能会适得其反，造成可读性、可维护性下降等问题。
在某些注解中，可能有很多配置项，比如：
//这还不是一个特别夸张的例子 @CircuitBreaker(timeout=0.05, failCounter=1, successCounter=1, fallback=&amp;#34;App\Service\UserService::searchFallback&amp;#34;) 如果我们的代码里用很多这样复杂的注解，就会引来以下几个问题：
 注解中可使用的数据类型表达能力很弱，比如必须用方法的字符串全名来表达方法。 离开了IDE的帮助，长注解的可读性变得很差。（比如在Github上） 同样配置的注解多个地方使用，修改时要改很多地方。  这里我向大家推荐通过继承的方式配置Hyperf内的注解。
下面是一个继承CircuitBreaker的例子。
&amp;lt;?php ... /** * @Annotation * @Target({&amp;#34;METHOD&amp;#34;}) * * Shorthand for CircuitBreaker(timeout=0.05, failCounter=1, successCounter=1, fallback=&amp;#34;App\Service\UserService::searchFallback&amp;#34;) */ class FooCircuitBreakerAnnotation extends CircuitBreakerAnnotation { /** * @var float */ public $timeout = 0.05; /** * @var string */ public $fallback = UserService::class.&amp;#39;::searchFallback&amp;#39;; /** * The counter required to reset to a close state. * @var int */ public $successCounter = 1; /** * The counter required to reset to a open state.</description>
    </item>
    
    <item>
      <title>Rethink The Clean Architecture</title>
      <link>https://guxi.me/posts/rethink-clean-architecture/</link>
      <pubDate>Sun, 11 Aug 2019 21:56:39 +0800</pubDate>
      
      <guid>https://guxi.me/posts/rethink-clean-architecture/</guid>
      <description>The Clean Architecture is more like a fantasy. It is like a wonderland we will never be in.
I would enjoy and appreciate a work where all business domains, application domains, and transports and UIs, etc. are all orthogonal. In reality, they are all wired together like a mess. It is no mess created by engineer though. The world is chaotic by itself, so do all the business around it. Imagine your boss tell your team to add a new button to your website, and you find your business rule doesn&amp;rsquo;t cover this button what so ever, so you have to update your JSON API, add new test cases, and add new event to your event sourcing bus, and change whatever is affected all the way down to the database level.</description>
    </item>
    
    <item>
      <title>Never Force Yourself to Learn New Skills Without a Concrete Project</title>
      <link>https://guxi.me/posts/never-force-yourself-to-learn-new-skills-without-a-concrete-project/</link>
      <pubDate>Sun, 28 Jul 2019 13:51:45 +0800</pubDate>
      
      <guid>https://guxi.me/posts/never-force-yourself-to-learn-new-skills-without-a-concrete-project/</guid>
      <description>As the job demand is going nowhere in a decade, a lot of new guys want to get into programming. There are numerous courses online, teaching a variety of skills in programming. There are also new shinning frameworks climbing up GitHub trending every day. I see a lot of people, typically newly graduated students, get confused. There seems to be an endless stream of knowledge to learn. How many skills are enough?</description>
    </item>
    
    <item>
      <title>Ad Server Rewrite: Goals and Non Goals</title>
      <link>https://guxi.me/posts/ad-server-rewrite-goals-and-non-goals/</link>
      <pubDate>Fri, 26 Jul 2019 10:08:36 +0800</pubDate>
      
      <guid>https://guxi.me/posts/ad-server-rewrite-goals-and-non-goals/</guid>
      <description>We have carried out the first or maybe last round of rewrite of the Juhui DSP/SSP/ADX with Typescript. A few goals and non-goals have been set for this labor-intensive process.
Goals  Strong typed. Strong API contracts. Holistic Observability with logging, tracing, and metrics. Layered Architecture and dedicated component. Testcases can be run by anyone. Stateless over stateful. Improved readability. Proper code deprecation process.  Non-Goals  Use fancy technology.</description>
    </item>
    
    <item>
      <title>Good Code Are Easy to Remove</title>
      <link>https://guxi.me/posts/good-code-are-easy-to-remove/</link>
      <pubDate>Sat, 06 Jul 2019 23:18:37 +0800</pubDate>
      
      <guid>https://guxi.me/posts/good-code-are-easy-to-remove/</guid>
      <description>Over the days I have been thinking about improving my coding one step further. As I was refactoring some company work, this idea came to me.
One of the least mentioned traits of good code is that you can easily remove a slice of them (from a larger project).
Think about that. Removability means components are modular, architecture is layered, and abstractions are aptly interfaced. It also means Single Responsibility is enforced, so removing one thing won’t jeopardize another.</description>
    </item>
    
    <item>
      <title>Manual Injection</title>
      <link>https://guxi.me/posts/manual-injection/</link>
      <pubDate>Thu, 27 Jun 2019 21:06:28 +0800</pubDate>
      
      <guid>https://guxi.me/posts/manual-injection/</guid>
      <description>Came across this pic from twitter.
If I have an adequate number of audience, I would like to make poll out of it. What do you think about this piece of code?
 A: It is good code. B: It is bad code.  I have never done react before (Or I have, but not professional). However this piece of code is very readable to me. If I was tasked with the job to maintain this code, I would appreciate the original author for coding in this fashion.</description>
    </item>
    
  </channel>
</rss>