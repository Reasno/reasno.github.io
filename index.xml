<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Garbage Collected</title>
    <link>https://guxi.me/</link>
    <description>Recent content on Garbage Collected</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jul 2019 10:08:36 +0800</lastBuildDate>
    
	<atom:link href="https://guxi.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ad Server Rewrite: Goals and Non Goals</title>
      <link>https://guxi.me/posts/ad-server-rewrite-goals-and-non-goals/</link>
      <pubDate>Fri, 26 Jul 2019 10:08:36 +0800</pubDate>
      
      <guid>https://guxi.me/posts/ad-server-rewrite-goals-and-non-goals/</guid>
      <description>We have carried out the first or maybe last round of rewrite of the Juhui DSP/SSP/ADX with Typescript. A few goals and non-goals have been set for this labor-intensive process.
Goals  Strong typed. Strong API contracts. Holistic Observability with logging, tracing, and metrics. Layered Architecture and dedicated component. Testcases can be run by anyone. Stateless over stateful. Improved readability. Proper code deprecation process.  Non-Goals  Use fancy technology.</description>
    </item>
    
    <item>
      <title>Epoll and Event Loop: Just Enough You Need for Interview</title>
      <link>https://guxi.me/posts/epoll-and-event-loop-just-enough-you-need-for-interview/</link>
      <pubDate>Wed, 24 Jul 2019 14:15:03 +0800</pubDate>
      
      <guid>https://guxi.me/posts/epoll-and-event-loop-just-enough-you-need-for-interview/</guid>
      <description>The biggest challenge for intermediate developers to understand event loop is that the articles found around the web are either written for die-hard C programmers or simply too long to read. I will give a try on explaining the event loop/epoll(), and stop at a point where interviewers will be sufficiently satisfied.
The first thing should be made crystal clear is that things happen on two sides: The kernel and the userspace.</description>
    </item>
    
    <item>
      <title>Transactions Are Not Atomic</title>
      <link>https://guxi.me/posts/transactions-are-not-atomic/</link>
      <pubDate>Fri, 19 Jul 2019 19:38:06 +0800</pubDate>
      
      <guid>https://guxi.me/posts/transactions-are-not-atomic/</guid>
      <description>MySQL (InnoDB) transactions are ACID, with A for atomicity.
 An atomic transaction is an indivisible and irreducible series of database operations such that either all occur, or nothing occurs
 The atomicity here is different from the atomicity in concurrent programming.
 An operation acting on shared memory is atomic if it completes in a single step relative to other threads.
 Suppose you want to read a number from a column, add it by an offset, and write it back to the same column.</description>
    </item>
    
    <item>
      <title>When Do We Need PHP</title>
      <link>https://guxi.me/posts/when-do-we-need-php/</link>
      <pubDate>Thu, 18 Jul 2019 12:57:59 +0800</pubDate>
      
      <guid>https://guxi.me/posts/when-do-we-need-php/</guid>
      <description>When we started huijiwiki.com, PHP was the language of the choice. But it was not much a choice. MediaWiki was coded in PHP. It provided us a solid starting point to expand our idea.
Since then I have touched many languages and am moderately proficient in some of them. Among them, Go is my current favorite. Rust is the language I want to explore more.
Go as well as Rust has a very different nature compared to PHP.</description>
    </item>
    
    <item>
      <title>Realtime Query Oriented Data Structure for DMP</title>
      <link>https://guxi.me/posts/realtime-query-oriented-data-structure-for-dmp/</link>
      <pubDate>Sat, 13 Jul 2019 11:21:14 +0800</pubDate>
      
      <guid>https://guxi.me/posts/realtime-query-oriented-data-structure-for-dmp/</guid>
      <description>DMP stands for Data Management Platform, and per Wikipedia, it is a technology platform used for collecting and managing data, mainly for digital marketing purposes. To put it simply, DMP is a collection of data about user attributes.
As you might expect a DMP may contain more than millions of data. The DMP I worked on contained nearly a billion. Open source toolings such as Elasticsearch provided a good average baseline for data analytics, and reasonable response time for general-purpose querying.</description>
    </item>
    
    <item>
      <title>Binlog Decoding</title>
      <link>https://guxi.me/posts/binlog-decoding/</link>
      <pubDate>Fri, 12 Jul 2019 14:02:34 +0800</pubDate>
      
      <guid>https://guxi.me/posts/binlog-decoding/</guid>
      <description>I have to admit I am really clumsy when it comes to SQL related stuff. This is the year of 2019, and SQL is not a fancy technology to learn anymore. I managed to get away with not diving deep into SQL for a long time, but the lack of fluency in SQL bites me quite often recently.
Yesterday I was forced into a binlog trace of the production MySQL database.</description>
    </item>
    
    <item>
      <title>Id Based Throttling</title>
      <link>https://guxi.me/posts/id-based-throttling/</link>
      <pubDate>Thu, 11 Jul 2019 07:43:40 +0800</pubDate>
      
      <guid>https://guxi.me/posts/id-based-throttling/</guid>
      <description>RxJS is bonkers!
Imagine you have an unbounded stream of events. Each has a unique id. Now you want to throttle the stream based on id, ie. each id should not appear more often than X minutes.
With RxJS:
// Throttle each id in one minute. fromEvent(emitter, &#39;tick&#39;).pipe( groupBy((e: Event) =&amp;gt; e.getId()), flatMap(group =&amp;gt; group.pipe(throttleTime(60 * 1000))), ).subscribe( //Do your stuff );  Without RxJS:
Too much to write.</description>
    </item>
    
    <item>
      <title>Good Code Are Easy to Remove</title>
      <link>https://guxi.me/posts/good-code-are-easy-to-remove/</link>
      <pubDate>Sat, 06 Jul 2019 23:18:37 +0800</pubDate>
      
      <guid>https://guxi.me/posts/good-code-are-easy-to-remove/</guid>
      <description>Over the days I have been thinking about improving my coding one step further. As I was refactoring some company work, this idea came to me.
One of the least mentioned traits of good code is that you can easily remove a slice of them (from a larger project).
Think about that. Removability means components are modular, architecture is layered, and abstractions are aptly interfaced. It also means Single Responsibility is enforced, so removing one thing wonâ€™t jeopardize another.</description>
    </item>
    
    <item>
      <title>Options Take a Toll</title>
      <link>https://guxi.me/posts/options-take-a-toll/</link>
      <pubDate>Sun, 30 Jun 2019 16:24:33 +0800</pubDate>
      
      <guid>https://guxi.me/posts/options-take-a-toll/</guid>
      <description>Vue community exploded due to changes in Vue 3. Some comments are full of gunpowder with regards to the recent functional API RFC. Let me show my opinions up front:
 A. OSS authors clearly deserve more respect.
 B. I think functional API generally are more expressive compared to the old one.
  However I would like to provide a counter argument to a very point the defender of RFC made.</description>
    </item>
    
    <item>
      <title>Manual Injection</title>
      <link>https://guxi.me/posts/manual-injection/</link>
      <pubDate>Thu, 27 Jun 2019 21:06:28 +0800</pubDate>
      
      <guid>https://guxi.me/posts/manual-injection/</guid>
      <description>Came across this pic from twitter.
If I have an adequate number of audience, I would like to make poll out of it. What do you think about this piece of code?
 A: It is good code. B: It is bad code.  I have never done react before (Or I have, but not professional). However this piece of code is very readable to me. If I was tasked with the job to maintain this code, I would appreciate the original author for coding in this fashion.</description>
    </item>
    
    <item>
      <title>Beauty of Lazy Execution</title>
      <link>https://guxi.me/posts/beauty-of-lazy-execution/</link>
      <pubDate>Thu, 27 Jun 2019 00:17:13 +0800</pubDate>
      
      <guid>https://guxi.me/posts/beauty-of-lazy-execution/</guid>
      <description>I have done some quick&amp;rsquo;n&amp;rsquo;dirty bid data processing with Apache Beam in past weeks. As someone who try to stay away from JVM, I am not a big data expert at all. However the working with apache beam is a blast (Using JAVA!). The lazy execution style feels right a home. I love wiring a various component into a topology, and only start processing when data arrives.
I once heard a Haskell fan said that she thought lazy execution was what set Haskell apart from other programing languages.</description>
    </item>
    
    <item>
      <title>Industry on Service Mesh</title>
      <link>https://guxi.me/posts/industry-on-service-mesh/</link>
      <pubDate>Mon, 24 Jun 2019 14:11:24 +0800</pubDate>
      
      <guid>https://guxi.me/posts/industry-on-service-mesh/</guid>
      <description>Just read a thread in twitter from Matt Klein, where he basically summarized his opinion about complex tooling like service mesh. Though it is not straightforward to me that Matt, the creator of envoy, is actually dissuading people from jumping on the mesh train, his opinion is not really a fresh one. It seems to be a more and more accepted idea that service mesh are not for every body. It solves a domain of problems that only the top of the pyramid would encounter but meanwhile introduces a bunch of other headaches.</description>
    </item>
    
  </channel>
</rss>